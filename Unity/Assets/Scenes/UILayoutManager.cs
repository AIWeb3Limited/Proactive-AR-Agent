using UnityEngine;
using UnityEngine.UI;
using TMPro;
using System.Collections.Generic;
using System;

/// <summary>
/// UI Layout Manager
/// Main responsibility is to receive LLM generated parameters and create UI layouts
/// </summary>
public class UILayoutManager : MonoBehaviour
{
    [Header("Canvas Settings")]
    public Canvas targetCanvas;
    public bool autoFindCanvas = true;

    [Header("Debug Settings")]
    public bool enableDebugLog = true;
    public bool saveLayoutToFile = false;

    private UIElementFactory elementFactory;
    private UILayoutData currentLayout;
    private Dictionary<string, GameObject> layoutElements;

    // Event delegates
    public Action<string, UILayoutData> OnLayoutCreated;
    public Action<string> OnLayoutCleared;
    public Action<string, string> OnElementClicked;

    void Awake()
    {
        // Auto find Canvas
        if (autoFindCanvas && targetCanvas == null)
        {
            targetCanvas = FindObjectOfType<Canvas>();
            if (targetCanvas == null)
            {
                CreateDefaultCanvas();
            }
        }

        // Initialize factory and dictionary
        elementFactory = new UIElementFactory(targetCanvas.transform);
        layoutElements = new Dictionary<string, GameObject>();
    }

    #region Public Interface Methods (For LLM system calls)

    /// <summary>
    /// Main interface: Create UI layout from JSON string
    /// LLM system calls this method to pass generated parameters
    /// </summary>
    /// <param name="jsonLayoutData">JSON format layout data generated by LLM</param>
    /// <returns>Whether creation was successful</returns>
    public bool CreateLayoutFromJson(string jsonLayoutData)
    {
        try
        {
            if (enableDebugLog)
                Debug.Log($"[UILayoutManager] Received layout data: {jsonLayoutData}");

            // Validate JSON format
            string errorMessage;
            if (!JsonHelper.ValidateLayoutJson(jsonLayoutData, out errorMessage))
            {
                Debug.LogError($"[UILayoutManager] JSON validation failed: {errorMessage}");
                return false;
            }

            // Parse JSON data
            UILayoutData layoutData = JsonUtility.FromJson<UILayoutData>(jsonLayoutData);
            
            return CreateLayout(layoutData);
        }
        catch (Exception e)
        {
            Debug.LogError($"[UILayoutManager] JSON parsing failed: {e.Message}");
            return false;
        }
    }

    /// <summary>
    /// 通过UILayoutData对象创建布局
    /// </summary>
    /// <param name="layoutData">布局数据对象</param>
    /// <returns>是否创建成功</returns>
    public bool CreateLayout(UILayoutData layoutData)
    {
        try
        {
            if (layoutData == null)
            {
                Debug.LogError("[UILayoutManager] 布局数据为空");
                return false;
            }

            // 清理现有布局
            ClearCurrentLayout();

            // 保存当前布局数据
            currentLayout = layoutData;

            // 应用全局设置
            ApplyGlobalSettings(layoutData);

            // 创建根元素
            CreateRootElements(layoutData.rootElements);

            // 触发创建完成事件
            OnLayoutCreated?.Invoke(layoutData.layoutName, layoutData);

            if (enableDebugLog)
                Debug.Log($"[UILayoutManager] 布局 '{layoutData.layoutName}' 创建成功");

            // 可选：保存布局到文件
            if (saveLayoutToFile)
            {
                SaveLayoutToFile(layoutData);
            }

            return true;
        }
        catch (Exception e)
        {
            Debug.LogError($"[UILayoutManager] 布局创建失败：{e.Message}");
            return false;
        }
    }

    /// <summary>
    /// 更新指定元素的属性
    /// </summary>
    /// <param name="elementId">元素ID</param>
    /// <param name="newData">新的元素数据</param>
    public bool UpdateElement(string elementId, UIElementData newData)
    {
        if (layoutElements.ContainsKey(elementId))
        {
            GameObject element = layoutElements[elementId];
            // 这里可以实现元素属性的动态更新
            Debug.Log($"[UILayoutManager] 更新元素：{elementId}");
            return true;
        }
        
        Debug.LogWarning($"[UILayoutManager] 未找到元素：{elementId}");
        return false;
    }

    /// <summary>
    /// 清理当前布局
    /// </summary>
    public void ClearCurrentLayout()
    {
        if (elementFactory != null)
        {
            elementFactory.ClearAll();
        }

        // 清理Canvas下的所有UI元素（保留Canvas本身）
        for (int i = targetCanvas.transform.childCount - 1; i >= 0; i--)
        {
            Transform child = targetCanvas.transform.GetChild(i);
            if (child.gameObject != targetCanvas.gameObject)
            {
                DestroyImmediate(child.gameObject);
            }
        }

        layoutElements.Clear();
        
        string layoutName = currentLayout?.layoutName ?? "Unknown";
        currentLayout = null;
        
        OnLayoutCleared?.Invoke(layoutName);
        
        if (enableDebugLog)
            Debug.Log("[UILayoutManager] 当前布局已清理");
    }

    /// <summary>
    /// 获取指定ID的UI元素
    /// </summary>
    /// <param name="elementId">元素ID</param>
    /// <returns>GameObject或null</returns>
    public GameObject GetElement(string elementId)
    {
        return layoutElements.ContainsKey(elementId) ? layoutElements[elementId] : null;
    }

    /// <summary>
    /// 获取当前布局数据
    /// </summary>
    /// <returns>当前的UILayoutData</returns>
    public UILayoutData GetCurrentLayout()
    {
        return currentLayout;
    }

    /// <summary>
    /// 获取布局的JSON字符串
    /// </summary>
    /// <returns>JSON格式的布局数据</returns>
    public string GetLayoutAsJson()
    {
        if (currentLayout == null)
            return null;

        try
        {
            return JsonUtility.ToJson(currentLayout, true);
        }
        catch (Exception e)
        {
            Debug.LogError($"[UILayoutManager] JSON序列化失败：{e.Message}");
            return null;
        }
    }

    #endregion

    #region 内部实现方法

    /// <summary>
    /// 应用全局设置
    /// </summary>
    private void ApplyGlobalSettings(UILayoutData layoutData)
    {
        // 设置Canvas尺寸
        CanvasScaler scaler = targetCanvas.GetComponent<CanvasScaler>();
        if (scaler != null)
        {
            scaler.referenceResolution = layoutData.canvasSize;
        }

        if (enableDebugLog)
            Debug.Log($"[UILayoutManager] 应用全局设置 - 主题:{layoutData.theme}, 画布尺寸:{layoutData.canvasSize}");
    }

    /// <summary>
    /// 创建根元素
    /// </summary>
    private void CreateRootElements(List<UIElementData> rootElements)
    {
        if (rootElements == null || rootElements.Count == 0)
        {
            Debug.LogWarning("[UILayoutManager] 没有根元素需要创建");
            return;
        }

        foreach (UIElementData elementData in rootElements)
        {
            CreateElementRecursive(elementData, targetCanvas.transform);
        }
    }

    /// <summary>
    /// 递归创建元素
    /// </summary>
    private void CreateElementRecursive(UIElementData elementData, Transform parent)
    {
        GameObject element = elementFactory.CreateUIElement(elementData, parent);
        
        if (element != null && !string.IsNullOrEmpty(elementData.id))
        {
            layoutElements[elementData.id] = element;
            
            // 设置点击事件
            SetupElementEvents(element, elementData);
        }
    }

    /// <summary>
    /// 设置元素事件
    /// </summary>
    private void SetupElementEvents(GameObject element, UIElementData data)
    {
        // 按钮点击事件
        Button button = element.GetComponent<Button>();
        if (button != null && !string.IsNullOrEmpty(data.onClick))
        {
            button.onClick.AddListener(() => {
                OnElementClicked?.Invoke(data.id, data.onClick);
                if (enableDebugLog)
                    Debug.Log($"[UILayoutManager] 元素点击：{data.id} -> {data.onClick}");
            });
        }

        // 输入框值改变事件
        TMP_InputField inputField = element.GetComponent<TMP_InputField>();
        if (inputField != null && !string.IsNullOrEmpty(data.onValueChanged))
        {
            inputField.onValueChanged.AddListener((value) => {
                if (enableDebugLog)
                    Debug.Log($"[UILayoutManager] 输入值改变：{data.id} -> {value}");
            });
        }
    }

    /// <summary>
    /// 创建默认Canvas
    /// </summary>
    private void CreateDefaultCanvas()
    {
        GameObject canvasObj = new GameObject("Generated Canvas");
        targetCanvas = canvasObj.AddComponent<Canvas>();
        targetCanvas.renderMode = RenderMode.ScreenSpaceOverlay;
        
        CanvasScaler scaler = canvasObj.AddComponent<CanvasScaler>();
        scaler.uiScaleMode = CanvasScaler.ScaleMode.ScaleWithScreenSize;
        scaler.referenceResolution = new Vector2(1920, 1080);
        
        canvasObj.AddComponent<GraphicRaycaster>();
        
        if (enableDebugLog)
            Debug.Log("[UILayoutManager] 创建了默认Canvas");
    }

    /// <summary>
    /// 保存布局到文件
    /// </summary>
    private void SaveLayoutToFile(UILayoutData layoutData)
    {
        try
        {
            string json = JsonUtility.ToJson(layoutData, true);
            string fileName = $"Layout_{layoutData.layoutName}_{DateTime.Now:yyyyMMdd_HHmmss}.json";
            string filePath = System.IO.Path.Combine(Application.persistentDataPath, fileName);
            
            System.IO.File.WriteAllText(filePath, json);
            
            if (enableDebugLog)
                Debug.Log($"[UILayoutManager] 布局已保存到：{filePath}");
        }
        catch (Exception e)
        {
            Debug.LogError($"[UILayoutManager] 保存布局失败：{e.Message}");
        }
    }

    #endregion

    #region Unity生命周期

    void OnDestroy()
    {
        ClearCurrentLayout();
    }

    #endregion
}

/// <summary>
/// 辅助类：提供静态方法供外部快速调用
/// </summary>
public static class UILayoutHelper
{
    /// <summary>
    /// 快速创建布局的静态方法
    /// </summary>
    /// <param name="jsonData">JSON布局数据</param>
    /// <param name="targetCanvas">目标Canvas</param>
    /// <returns>创建的UILayoutManager实例</returns>
    public static UILayoutManager QuickCreateLayout(string jsonData, Canvas targetCanvas = null)
    {
        GameObject managerObj = new GameObject("UILayoutManager");
        UILayoutManager manager = managerObj.AddComponent<UILayoutManager>();
        
        if (targetCanvas != null)
        {
            manager.targetCanvas = targetCanvas;
            manager.autoFindCanvas = false;
        }
        
        manager.CreateLayoutFromJson(jsonData);
        return manager;
    }
} 